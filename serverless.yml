org: sarlos
app: aws-python-http-api-project
service: aws-serverless-react-template
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: python3.9
  region: ${env:REGION}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - ${env:S3_BUCKET_NAME}
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - ${env:S3_BUCKET_NAME}
                - "/*"

package:
  patterns:
    - '!node_modules'
    - '!package.json'
    - '!package-lock.json'
    - '!poetry.lock'
    - '!pyproject.toml'
    - '!pytest.ini'
    - '!ui/**'
    - '!test/**'


functions:
  api:
    handler: api.main.handler
    events:
      - httpApi:
          path: "*"
          method: "*"
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    environment:
      AUTH_CLIENT_ID: ${env:AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${env:AUTH_CLIENT_SECRET}
      AUTH_HOSTED_UI: ${env:AUTH_HOSTED_UI}
      AUTH_REDIRECT_URI: ${env:AUTH_REDIRECT_URI}
      S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
      ALLOW_ORIGIN: ${env:ALLOW_ORIGIN}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  basePath:
    dev: ${env:BASE_PATH_DEV}
    prd: ${env:BASE_PATH_PRD}
  customDomain:
    domainName: api.aws.sarlos.jp
    stage: ${self:custom.stage}
    basePath: ${self:custom.basePath.${self:custom.stage}}
    certificateName: '*.aws.sarlos.jp'
    createRoute53Record: true
    endpointType: 'regional'
    apiType: http
    securityPolicy: tls_1_2
  pythonRequirements:
    dockerizePip: true
    layer: true
